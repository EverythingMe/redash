#!/bin/bash
set -e

if [ -z $REDASH_CACHE_URL ]; then
  export REDASH_CACHE_URL=redis://:${REDASH_CACHE_PASSWORD}@${REDASH_CACHE_HOSTNAME}:${REDASH_CACHE_PORT}/${REDASH_CACHE_NAME}
fi

if [ -z $REDASH_DB_URL ]; then
  export REDASH_DB_URL=postgresql://${REDASH_DB_USER}:${REDASH_DB_PASSWORD}@${REDASH_DB_HOSTNAME}:${REDASH_DB_PORT}/${REDASH_DB_NAME}
fi

scheduler() {
  echo "Starting RQ scheduler..."

  case $REDASH_PRODUCTION in
    true)
      echo "Starting RQ scheduler in production mode"
      exec ./manage.py rq scheduler
      ;;
    *)
      echo "Starting RQ scheduler in dev mode"
      exec watchmedo auto-restart \
        --directory=./redash/ \
        --pattern=*.py \
        --recursive -- ./manage.py rq scheduler $QUEUES
      ;;
  esac
}

worker() {
  export WORKERS_COUNT=${WORKERS_COUNT:-2}
  export QUEUES=${QUEUES:-}
  case $REDASH_PRODUCTION in
    true)
      echo "Starting RQ worker in production mode"
      exec supervisord -c worker.conf
      ;;
    *)
      echo "Starting RQ worker in dev mode"
      exec watchmedo auto-restart \
        --directory=./redash/ \
        --pattern=*.py \
        --recursive -- ./manage.py rq worker $QUEUES
      ;;
  esac
}

workers_healthcheck() {
  WORKERS_COUNT=${WORKERS_COUNT}
  echo "Checking active workers count against $WORKERS_COUNT..."
  ACTIVE_WORKERS_COUNT=`echo $(rq info --url $REDASH_CACHE_URL -R | grep workers | grep -oP ^[0-9]+)`
  if [ "$ACTIVE_WORKERS_COUNT" -lt "$WORKERS_COUNT"  ]; then
    echo "$ACTIVE_WORKERS_COUNT workers are active, Exiting"
    exit 1
  else
    echo "$ACTIVE_WORKERS_COUNT workers are active"
    exit 0
  fi
}

server() {
  # Recycle gunicorn workers every n-th request. See http://docs.gunicorn.org/en/stable/settings.html#max-requests for more details.
  case $REDASH_PRODUCTION in
    true)
      echo "Starting Redash Server in production mode"
      MAX_REQUESTS=${MAX_REQUESTS:-1000}
      MAX_REQUESTS_JITTER=${MAX_REQUESTS_JITTER:-100}
      TIMEOUT=${REDASH_GUNICORN_TIMEOUT:-60}
      exec /usr/local/bin/gunicorn \
        -b 0.0.0.0:5000 \
        --name redash \
        -w${REDASH_WEB_WORKERS:-4} redash.wsgi:app \
        --max-requests $MAX_REQUESTS \
        --max-requests-jitter $MAX_REQUESTS_JITTER \
        --timeout $TIMEOUT
      ;;
    *)
      echo "Starting Redash Server in a dev mode"
      export FLASK_DEBUG=1
      exec /app/manage.py runserver --debugger --reload -h 0.0.0.0
      ;;
  esac
}

migrate() {
  REDASH_DB_MIGRATE_TIMEOUT=${REDASH_DB_UPGRADE_TIMEOUT:-600}
  REDASH_DB_MIGRATE_MAX_ATTEMPTS=${REDASH_DB_MIGRATE_MAX_ATTEMPTS:-5}
  REDASH_DB_MIGRATE_RETRY_WAIT=${REDASH_DB_MIGRATE_RETRY_WAIT:-10}
  ATTEMPTS=0
  while ((ATTEMPTS < REDASH_DB_MIGRATE_MAX_ATTEMPTS)); do
    echo "Starting attempt ${ATTEMPTS} of ${REDASH_DB_MIGRATE_MAX_ATTEMPTS}"
    ATTEMPTS=$((ATTEMPTS+1))
    timeout $REDASH_DB_MIGRATE_TIMEOUT /app/manage.py database create_tables
    timeout $REDASH_DB_MIGRATE_TIMEOUT /app/manage.py db upgrade
    STATUS=$(timeout $REDASH_DB_MIGRATE_TIMEOUT /app/manage.py status 2>&1)
    RETCODE=$?
    echo "Return code: ${RETCODE}"
    echo "Status: ${STATUS}"
    case "$RETCODE" in
      0)
        exit 0
        ;;
      124)
        echo "Status command timed out after ${REDASH_DB_MIGRATE_TIMEOUT} seconds."
        ;;
    esac
    case "$STATUS" in
      *sqlalchemy.exc.OperationalError*)
        echo "Database not yet functional, waiting."
        ;;
      *sqlalchemy.exc.ProgrammingError*)
        echo "Database does not appear to be installed."
        ;;
    esac
    echo "Waiting ${REDASH_DB_MIGRATE_RETRY_WAIT} seconds before retrying."
    sleep ${REDASH_DB_MIGRATE_RETRY_WAIT}
  done
  echo "Reached ${REDASH_DB_MIGRATE_MAX_ATTEMPTS} attempts, giving up."
  exit 1
}

help() {
  echo "Redash Docker."
  echo ""
  echo "Usage:"
  echo ""

  echo "server -- start Redash server (with gunicorn)"
  echo "worker -- start a single RQ worker"
  echo "scheduler -- start an rq-scheduler instance"
  echo ""
  echo "shell -- open shell"
  echo "debug -- start Flask development server with remote debugger via ptvsd"
  echo "migrate -- create database tables and run migrations"
  echo "manage -- CLI to manage redash"
  echo "tests -- run tests"
}

tests() {
  if [ $# -eq 0 ]; then
    TEST_ARGS=tests/
  else
    TEST_ARGS=$@
  fi
  exec pytest $TEST_ARGS
}

case "$1" in
  worker)
    shift
    worker
    ;;
  workers_healthcheck)
    shift
    workers_healthcheck
    ;;
  server)
    shift
    server
    ;;
  scheduler)
    shift
    scheduler
    ;;
  celery_healthcheck)
    shift
    echo "DEPRECATED: Celery has been replaced with RQ and now performs healthchecks autonomously as part of the 'worker' entrypoint."
    ;;
  debug)
    export FLASK_DEBUG=1
    export REMOTE_DEBUG=1
    exec /app/manage.py runserver --debugger --no-reload -h 0.0.0.0
    ;;
  shell)
    exec /app/manage.py shell
    ;;
  migrate)
    migrate
    ;;
  manage)
    shift
    exec /app/manage.py $*
    ;;
  tests)
    shift
    tests $@
    ;;
  help)
    shift
    help
    ;;
  *)
    exec "$@"
    ;;
esac
