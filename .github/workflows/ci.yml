name: Tests
on:
  push:
    branches:
      - multiarch-build
  pull_request:
env:
  NODE_VERSION: 16.20.1
  REGISTRY_IMAGE: achubatiuk/redash
jobs:
  backend-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - run: sudo pip install black==23.1.0 ruff==0.0.287
      - run: ruff check .
      - run: black --check .

  backend-unit-tests:
    runs-on: ubuntu-22.04
    needs: backend-lint
    env:
      COMPOSE_FILE: .ci/docker-compose.ci.yml
      COMPOSE_PROJECT_NAME: redash
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Build Docker Images
        run: |
          set -x
          mkdir client/dist
          touch client/dist/multi_org.html
          touch client/dist/index.html
          docker compose build --build-arg install_groups="main,all_ds,dev"
          docker compose up -d
          sleep 10
      - name: Create Test Database
        run: docker compose -p redash run --rm postgres psql -h postgres -U postgres -c "create database tests;"
      - name: List Enabled Query Runners
        run: docker compose -p redash run --rm redash manage ds list_types
      - name: Run Tests
        run: docker compose -p redash run --name tests redash tests --junitxml=junit.xml --cov-report=xml --cov=redash --cov-config=.coveragerc tests/
      - name: Copy Test Results
        run: |
          mkdir -p /tmp/test-results/unit-tests
          docker cp tests:/app/coverage.xml ./coverage.xml
          docker cp tests:/app/junit.xml /tmp/test-results/unit-tests/results.xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
      - name: Store Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: /tmp/test-results
      - name: Store Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml

  frontend-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install Dependencies
        run: |
          npm install --global --force yarn@1.22.19
          yarn cache clean && yarn --frozen-lockfile --network-concurrency 1
      - name: Run Lint
        run: yarn lint:ci
      - name: Store Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: /tmp/test-results

  frontend-unit-tests:
    runs-on: ubuntu-22.04
    needs: frontend-lint
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install Dependencies
        run: |
          npm install --global --force yarn@1.22.19
          yarn cache clean
          yarn --frozen-lockfile --network-concurrency 1
      - name: Run App Tests
        run: yarn test
      - name: Run Visualizations Tests
        run: cd viz-lib && yarn test
      - run: yarn lint

  frontend-e2e-tests:
    runs-on: ubuntu-22.04
    needs: frontend-lint
    env:
      COMPOSE_FILE: .ci/docker-compose.cypress.yml
      COMPOSE_PROJECT_NAME: cypress
      PERCY_TOKEN_ENCODED: ZGRiY2ZmZDQ0OTdjMzM5ZWE0ZGQzNTZiOWNkMDRjOTk4Zjg0ZjMxMWRmMDZiM2RjOTYxNDZhOGExMjI4ZDE3MA==
      CYPRESS_PROJECT_ID_ENCODED: OTI0Y2th
      CYPRESS_RECORD_KEY_ENCODED: YzA1OTIxMTUtYTA1Yy00NzQ2LWEyMDMtZmZjMDgwZGI2ODgx
      CYPRESS_INSTALL_BINARY: 0
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Enable Code Coverage Report For Master Branch
        if: endsWith(github.ref, '/master')
        run: |
          echo "CODE_COVERAGE=true" >> "$GITHUB_ENV"
      - name: Install Dependencies
        run: |
          npm install --global --force yarn@1.22.19
          yarn cache clean && yarn --frozen-lockfile --network-concurrency 1
      - name: Setup Redash Server
        run: |
          set -x
          yarn cypress build
          yarn cypress start -- --skip-db-seed
          docker compose run cypress yarn cypress db-seed
      - name: Execute Cypress Tests
        run: yarn cypress run-ci
      - name: "Failure: output container logs to console"
        if: failure()
        run: docker compose logs
      - name: Copy Code Coverage Results
        run: docker cp cypress:/usr/src/app/coverage ./coverage || true
      - name: Store Coverage Results
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage
      - uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: client/dist
          retention-days: 1

  build-skip-check:
    runs-on: ubuntu-22.04
    outputs:
      skip: ${{ steps.skip-check.outputs.skip }}
    steps:
      - name: Skip?
        id: skip-check
        run: |
          if [[ "${{ secrets.DOCKER_USER }}" == '' ]]; then
            echo 'Docker user is empty. Skipping build+push'
            echo skip=true >> "$GITHUB_OUTPUT"
          elif [[ "${{ secrets.DOCKER_PASS }}" == '' ]]; then
            echo 'Docker password is empty. Skipping build+push'
            echo skip=true >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" != 'multiarch-build' ]]; then
            echo 'Ref name is not `master`. Skipping build+push'
            echo skip=true >> "$GITHUB_OUTPUT"
          else
            echo 'Docker user and password are set and branch is `master`.'
            echo 'Building + pushing `preview` image.'
            echo skip=false >> "$GITHUB_OUTPUT"
          fi

  build-docker-image:
    runs-on: ubuntu-22.04
    needs:
      - backend-unit-tests
      - frontend-unit-tests
      - frontend-e2e-tests
      - build-skip-check
    if: needs.build-skip-check.outputs.skip == 'false'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: actions/download-artifact@v3
        with:
          name: frontend

      - name: Set up QEMU
        timeout-minutes: 1
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Bump version
        id: version
        run: |
          set -x
          .ci/update_version
          VERSION=$(jq -r .version package.json)
          VERSION_TAG="${VERSION}.b${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}"
          echo "VERSION_TAG=$VERSION_TAG" >> "$GITHUB_OUTPUT"

      - name: Build and push preview image to Docker Hub
        uses: docker/build-push-action@v5
        id: build
        with:
          push: true
          context: .
          build-args: |
            test_all_deps=true
          cache-from: type=ghq
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
        env:
          DOCKER_CONTENT_TRUST: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: "Failure: output container logs to console"
        if: failure()
        run: docker compose logs

  publish-docker-manifest:
    runs-on: ubuntu-22.04
    needs:
      - build-skip-check
      - build-docker-image
    if: needs.build-skip-check.outputs.skip == 'false'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: preview
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
      - name: Push image to redash/preview
        run: |
          docker buildx imagetools create \
            --tag achubatiuk/preview:${{ steps.version.outputs.VERSION_TAG }} \
            ${{ env.REGISTRY_IMAGE }}:preview
