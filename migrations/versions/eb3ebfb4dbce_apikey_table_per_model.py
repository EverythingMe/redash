"""apikey table per model

Revision ID: eb3ebfb4dbce
Revises: adf995786be0
Create Date: 2017-01-05 01:01:37.697104

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'eb3ebfb4dbce'
down_revision = 'adf995786be0'
branch_labels = None
depends_on = None


def upgrade():
    api_keys = sa.table(
        'api_keys',
        sa.Column('object_type', sa.VARCHAR(length=255)),
        sa.Column('object_id', sa.INTEGER()),
        sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True)),
        sa.Column('created_at', postgresql.TIMESTAMP(timezone=True)),
        sa.Column('id', sa.INTEGER()),
        sa.Column('org_id', sa.INTEGER()),
        sa.Column('api_key', sa.VARCHAR(length=255)),
        sa.Column('active', sa.BOOLEAN()),
        sa.Column('created_by_id', sa.INTEGER()))

    dashboards_api_keys = op.create_table(
        'dashboards_api_keys',
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('api_key', sa.String(length=255), nullable=False),
        sa.Column('active', sa.Boolean(), nullable=False),
        sa.Column('object_id', sa.Integer(), nullable=False),
        sa.Column('created_by_id', sa.Integer(), nullable=True),
        sa.Column('org_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['created_by_id'], ['users.id']),
        sa.ForeignKeyConstraint(['object_id'], ['dashboards.id']),
        sa.ForeignKeyConstraint(['org_id'], ['organizations.id']),
        sa.PrimaryKeyConstraint('api_key'))
    op.create_index(op.f('ix_dashboards_api_keys_api_key'),
                    'dashboards_api_keys', ['api_key'], unique=False)
    op.create_index(op.f('ix_dashboards_api_keys_object_id'),
                    'dashboards_api_keys', ['object_id'], unique=False)
    dashboards_api_keys.insert().from_select(
        [dashboards_api_keys.c.updated_at, dashboards_api_keys.c.created_at,
         dashboards_api_keys.c.api_key, dashboards_api_keys.c.active,
         dashboards_api_keys.c.object_id, dashboards_api_keys.c.created_by_id,
         dashboards_api_keys.c.org_id],
        sa.select([api_keys.c.updated_at, api_keys.c.created_at,
                   api_keys.c.api_key, api_keys.c.active,
                   api_keys.c.object_id, api_keys.c.created_by_id,
                   api_keys.c.org_id]).where(
                       api_keys.c.object_type == "dashboards"))
    op.drop_table('api_keys')


def downgrade():
    dashboards_api_keys = sa.table(
        'dashboards_api_keys',
        sa.Column('updated_at', sa.DateTime(timezone=True)),
        sa.Column('created_at', sa.DateTime(timezone=True)),
        sa.Column('api_key', sa.String(length=255)),
        sa.Column('active', sa.Boolean()),
        sa.Column('object_id', sa.Integer()),
        sa.Column('created_by_id', sa.Integer()),
        sa.Column('org_id', sa.Integer()))

    # ### commands auto generated by Alembic - please adjust! ###
    api_keys = op.create_table(
        'api_keys',
        sa.Column('object_type', sa.VARCHAR(length=255), autoincrement=False,
                  nullable=False),
        sa.Column('object_id', sa.INTEGER(), autoincrement=False,
                  nullable=False),
        sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True),
                  autoincrement=False, nullable=False),
        sa.Column('created_at', postgresql.TIMESTAMP(timezone=True),
                  autoincrement=False, nullable=False),
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('org_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('api_key', sa.VARCHAR(length=255), autoincrement=False,
                  nullable=False),
        sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column('created_by_id', sa.INTEGER(), autoincrement=False,
                  nullable=True),
        sa.ForeignKeyConstraint(['created_by_id'], [u'users.id'],
                                name=u'api_keys_created_by_id_fkey'),
        sa.ForeignKeyConstraint(['org_id'], [u'organizations.id'],
                                name=u'api_keys_org_id_fkey'),
        sa.PrimaryKeyConstraint('id', name=u'api_keys_pkey'))
    api_keys.insert().from_select(
        [api_keys.c.object_type, api_keys.c.updated_at, api_keys.c.created_at,
         api_keys.c.api_key, api_keys.c.active, api_keys.c.object_id,
         api_keys.c.created_by_id, api_keys.c.org_id],
        sa.select([
            sa.literal_column('dashboards').label('object_type'),
            dashboards_api_keys.c.updated_at, dashboards_api_keys.c.created_at,
            dashboards_api_keys.c.api_key, dashboards_api_keys.c.active,
            dashboards_api_keys.c.object_id,
            dashboards_api_keys.c.created_by_id,
            dashboards_api_keys.c.org_id]))
    op.drop_index(op.f('ix_dashboards_api_keys_object_id'),
                  table_name='dashboards_api_keys')
    op.drop_index(op.f('ix_dashboards_api_keys_api_key'),
                  table_name='dashboards_api_keys')
    op.drop_table('dashboards_api_keys')
    # ### end Alembic commands ###
